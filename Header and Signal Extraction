import wfdb
import pandas as pd


# Function to read, display, plot, and save WFDB data and header metadata
def process_wfdb_data(File_Base, type):
    # 1. Read the header (metadata from .hea file)
    record_header = wfdb.rdheader(File_Base)

    # Display the header information
    # print("Record Name:", record_header.record_name)
    # print("Number of Signals:", record_header.n_sig)
    # print("Sampling Frequency (Hz):", record_header.fs)
    # print("Signal Length (samples):", record_header.sig_len)
    # print("Signal Names:", record_header.sig_name)
    # print("Signal Units:", record_header.units)
    # print("Comments:", record_header.comments)

    # Save header information (metadata) to a CSV file
    header_metadata = {
        'Record Name': [record_header.record_name],
        'Number of Signals': [record_header.n_sig],
        'Sampling Frequency (Hz)': [record_header.fs],
        'Signal Length (samples)': [record_header.sig_len],
        'Signal Names': [", ".join(record_header.sig_name)],
        'Signal Units': [", ".join(record_header.units)],
        'Comments': [", ".join(record_header.comments)]
    }
    header_df = pd.DataFrame(header_metadata)
    header_csv_filename = f'{record_header.record_name}_header.csv'
    header_df.to_csv(f'Headers and Signals as CSV/{type}/{header_csv_filename}', index=False)
    print(f"Header metadata saved to: {header_csv_filename}")

    # 2. Read the signal data from the .dat file
    record = wfdb.rdrecord(File_Base)

    # Extract signal data and metadata
    signals = record.p_signal  # Physical signals in mV
    fs = record.fs  # Sampling frequency
    sig_names = record.sig_name  # Signal names
    units = record.units  # Signal units

    # # Display some signal information
    # print(f"First few readings of signal 1 ({sig_names[0]}): {signals[:5, 0]}")
    # print(f"First few readings of signal 2 ({sig_names[1]}): {signals[:5, 1]}")

    # 3. Save the signal data to CSV
    signal_df = pd.DataFrame(signals, columns=sig_names)
    csv_filename = f'Headers and Signals as CSV/{type}/{record_header.record_name}_signals.csv'
    signal_df.to_csv(csv_filename, index=False)
    print(f"Signal data saved to: {csv_filename}")


# Main function to process a specific WFDB record
if __name__ == "__main__":

    files_numbers = {'early_cesarean': [657, 666, 673, 814, 885, 976, 1089, 1175, 1187, 1393, 1443],
                     'early_induced': [1248, 1297, 1303, 1361, 1388, 1394, 1408, 1416, 1444, 1449, 1454, 1496, 1568,
                                       1570, 1599, 1680, 1698, 620, 656, 665, 691, 713, 757, 774, 806, 907, 958, 1011,
                                       1064, 1077, 1081, 1086, 1124, 1148, 1180, 1185, 1235, 1243],
                     'early_induced-cesarean': [571, 650, 759, 959, 985, 1019, 1053, 1091, 1098, 1131, 1330, 1530,
                                                1682],
                     'later_cesarean': [654, 675, 714, 851, 1373, 1580, 1623, 1650],
                     'later_induced': [606, 629, 664, 668, 720, 756, 775, 784, 790, 799, 805, 811, 865, 871, 908, 924,
                                       925, 956, 989, 1010, 1040, 1049, 1052, 1059, 1079, 1101, 1122, 1179, 1184, 1238,
                                       1254, 1306, 1324, 1385, 1488, 1510, 1525, 1527, 1529, 1562, 1565, 1638, 1692],
                     'later_induced-cesarean': [647, 763, 1096, 1117, 1141, 1193, 1218, 1255, 1390, 1430, 1439, 1473,
                                                1655]
                     }
    for category, numbers in files_numbers.items():
        for number in numbers:
            # Path to the base of the file (without the extension)
            file_base = fr'Data\{category}\icehg{number}'

            # Process the WFDB data
            process_wfdb_data(file_base, category)
